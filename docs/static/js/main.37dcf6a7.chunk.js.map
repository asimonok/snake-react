{"version":3,"sources":["apps/Game/Game.module.css","shared/apps/Button/Button.module.css","apps/Game/apps/GameProgress/GameProgress.module.css","redux-app/utils/storage.js","redux-app/middlewares/permanent.js","constants/game.js","redux-app/modules/game/gameActions.js","redux-app/modules/game/gameReducer.js","redux-app/modules/user/userActions.js","redux-app/modules/user/userReducer.js","redux-app/index.js","redux-app/modules/index.js","redux-app/modules/game/gameSelectors.js","shared/apps/Button/Button.jsx","shared/apps/Button/index.js","apps/Game/apps/GameStart/GameStart.jsx","apps/Game/apps/GameStart/index.js","apps/Game/apps/GameStart/GameStartContainer.js","redux-app/modules/user/userSelectors.js","apps/Game/apps/GameProgress/game.js","apps/Game/apps/GameProgress/images/arrow-down.svg","apps/Game/apps/GameProgress/images/arrow-up.svg","apps/Game/apps/GameProgress/images/arrow-right.svg","apps/Game/apps/GameProgress/images/arrow-left.svg","apps/Game/apps/GameProgress/images/pause.svg","apps/Game/apps/GameProgress/GameProgress.jsx","apps/Game/apps/GameProgress/index.js","apps/Game/apps/GameProgress/GameProgressContainer.js","apps/Game/apps/Results/Results.jsx","apps/Game/apps/Results/index.js","apps/Game/apps/Results/ResultsContainer.js","apps/Game/Game.jsx","apps/Game/index.js","apps/Game/GameContainer.js","App.jsx","reportWebVitals.js","index.js","apps/Game/apps/Results/Results.module.css","apps/Game/apps/GameStart/GameStart.module.css"],"names":["module","exports","STORAGE_KEY","permanent","getState","next","action","state","returnValue","localStorage","setItem","JSON","stringify","version","GAME_STATUSES","START_NEW","START_GAME","FINISH_GAME","SET_GAME_INFO","SAVE_GAME_RESULT","defaultState","status","info","topResults","gameReducer","type","payload","updatedTopResults","username","scores","sort","a","b","SET_USERNAME","userReducer","store","composeEnhancers","compose","middleware","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","createStore","combineReducers","user","game","savedData","parse","getItem","getSavedState","applyMiddleware","create","getGameStatus","getGameInfo","getGameTopResults","cx","classNames","bind","styles","Button","children","fluid","className","size","restProps","GameStart","onChangeUsername","event","setState","target","value","onStartGame","preventDefault","props","setUsername","startGame","onSubmit","this","onChange","placeholder","Component","connect","getUsername","DIRECTIONS","CELLS_COUNT","getRandomArbitrary","min","max","Math","random","isCrashed","snake","i","length","j","x","y","getUpdatedSnakeHead","direction","newX","newY","getFruit","round","some","calcStep","fruit","updatedSnake","slice","updatedFruit","scoresDiff","isEnded","getInitialInfo","push","getDefaultSnake","isStarted","isPlaying","getUpdatedDirection","prevDir","nextDir","SPRITE_PARTS","SPRITE","GameProgress","areaContainerRef","sceneSize","width","height","gameInitialInfo","tempDirection","isShownMobileRotationMessage","calcStepTimer","onSetSceneSize","getBoundingClientRect","console","log","onPauseGame","setInterval","newDirection","nextStep","onFinishGame","setGameInfo","onRestartGame","clearInterval","saveGameResult","onKeyDown","keyCode","onChangeDirection","onSwipe","onGoToResults","finishGame","addEventListener","document","removeEventListener","cellSize","spritePositions","map","index","getSnakeSpriteParts","ref","style","head","transform","backgroundSize","backgroundPosition","getSpritePositionByPart","onClick","src","pause","alt","pressed","arrowUp","arrowRight","arrowDown","arrowLeft","Fragment","part","Results","results","startNew","Game","gameStatus","active","GameContainer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.37dcf6a7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Game_root__J3Hd7\",\"content\":\"Game_content__1cIbC\",\"gameStep\":\"Game_gameStep__PDPM8\",\"active\":\"Game_active__1YZ4z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Button_root__36fqZ\",\"fluid\":\"Button_fluid__1uvKZ\",\"large\":\"Button_large__1at-G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"GameProgress_root__1FMtp\",\"gameAreaContainer\":\"GameProgress_gameAreaContainer__1qST6\",\"gameArea\":\"GameProgress_gameArea__2Nc-d\",\"scores\":\"GameProgress_scores__SJnTP\",\"gameObject\":\"GameProgress_gameObject__EHgdi\",\"gameControls\":\"GameProgress_gameControls__11UEy\",\"gameControl\":\"GameProgress_gameControl__34QYC\",\"pressed\":\"GameProgress_pressed__1cLgM\",\"up\":\"GameProgress_up__nF36d\",\"right\":\"GameProgress_right__2RIXf\",\"left\":\"GameProgress_left__2_UI4\",\"down\":\"GameProgress_down__1IGkr\",\"gamePopup\":\"GameProgress_gamePopup__1hGzy\",\"gamePopupContent\":\"GameProgress_gamePopupContent__1ILGk\",\"pauseButton\":\"GameProgress_pauseButton__3PsJW\"};","const STORAGE_KEY = 'gameState';\nconst STORAGE_VERSION = 2;\n\nexport const getSavedState = () => {\n  const savedData = JSON.parse(localStorage.getItem(STORAGE_KEY)) || { version: STORAGE_VERSION, state: {} }\n  if (savedData.version === STORAGE_VERSION) {\n    return savedData.state\n  }\n  return {}\n}\n\nexport const saveState = state => {\n  localStorage.setItem(STORAGE_KEY, JSON.stringify({\n    version: STORAGE_VERSION,\n    state,\n  }))\n}\n","import { saveState } from '../utils/storage'\n\nexport const permanent = ({ getState }) => {\n  return next => action => {\n    const returnValue = next(action)\n\n    saveState(getState())\n\n    return returnValue\n  }\n}\n","export const GAME_STATUSES = {\n  notStarted: 'notStarted',\n  inProgress: 'inProgress',\n  finished: 'finished',\n}\n","export const START_NEW = 'game/START_NEW'\nexport const START_GAME = 'game/START_GAME'\nexport const FINISH_GAME = 'game/FINISH_GAME'\nexport const SET_GAME_INFO = 'game/SET_INFO'\nexport const SAVE_GAME_RESULT = 'game/SAVE_GAME_RESULT'\n\nexport const startNew = () => ({\n  type: START_NEW,\n})\n\nexport const startGame = () => ({\n  type: START_GAME,\n})\n\nexport const finishGame = () => ({\n  type: FINISH_GAME,\n})\n\nexport const setGameInfo = info => ({\n  type: SET_GAME_INFO,\n  payload: {\n    info,\n  },\n})\n\nexport const saveGameResult = ({ username }) => ({\n  type: SAVE_GAME_RESULT,\n  payload: {\n    username,\n  }\n})\n","import { GAME_STATUSES } from 'constants/game'\nimport { START_GAME, FINISH_GAME, SET_GAME_INFO, SAVE_GAME_RESULT, START_NEW } from './gameActions'\n\nconst defaultState = {\n  status: GAME_STATUSES.notStarted,\n  info: null,\n  topResults: [],\n}\n\nexport const gameReducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case START_GAME:\n      return {\n        ...state,\n        status: GAME_STATUSES.inProgress,\n      }\n    case START_NEW:\n      return {\n        ...state,\n        status: GAME_STATUSES.notStarted,\n      }\n    case FINISH_GAME:\n      return {\n        ...state,\n        status: GAME_STATUSES.finished,\n      }\n    case SET_GAME_INFO:\n      return {\n        ...state,\n        info: action.payload.info,\n      }\n    case SAVE_GAME_RESULT:\n      const updatedTopResults = [\n        ...state.topResults,\n        {\n          username: action.payload.username,\n          scores: state.info.scores,\n        }\n      ]\n      updatedTopResults.sort((a, b) => b.scores - a.scores)\n      return {\n        ...state,\n        info: null,\n        topResults: updatedTopResults\n      }\n    default:\n      return state\n  }\n}\n","export const SET_USERNAME = 'user/SET_USERNAME'\n\nexport const setUsername = username => ({\n  type: SET_USERNAME,\n  payload: {\n    username,\n  },\n})\n","import { SET_USERNAME } from './userActions'\n\nconst defaultState = {\n  username: null,\n}\n\nexport const userReducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case SET_USERNAME:\n      return {\n        ...state,\n        username: action.payload.username,\n      }\n    default:\n      return state\n  }\n}\n","import { createStore, compose, applyMiddleware } from 'redux'\nimport { permanent } from './middlewares/permanent'\nimport { rootReducer } from './modules';\nimport { getSavedState } from './utils/storage'\n\nconst create = () => {\n  let composeEnhancers = compose\n  const middleware = [\n    permanent,\n  ]\n\n   if (typeof window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ === 'function') {\n      composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    }\n\n  return createStore(\n    rootReducer(),\n    getSavedState(),\n    composeEnhancers(\n      applyMiddleware(...middleware),\n    )\n  )\n}\n\nexport const store = create();\n","import { combineReducers } from 'redux'\nimport { gameReducer } from './game/gameReducer'\nimport { userReducer } from './user/userReducer'\n\nexport const rootReducer = () => combineReducers({\n  user: userReducer,\n  game: gameReducer,\n})\n","export const getGameStatus = state => state.game.status\nexport const getGameInfo = state => state.game.info\nexport const getGameTopResults = state => state.game.topResults\n","import classNames from 'classnames/bind'\nimport * as styles from './Button.module.css'\n\nconst cx = classNames.bind(styles);\n\nconst Button = ({ children, className, fluid, size, ...restProps }) => (\n  <button\n    className={cx('root', size, { fluid })}\n    {...restProps}\n  >\n    {children}\n  </button>\n)\n\nexport default Button\n","import Button from './Button'\n\nexport default Button\n","import React, { Component } from 'react'\nimport Button from 'shared/apps/Button'\nimport * as styles from './GameStart.module.css'\n\nclass GameStart extends Component {\n  state = {\n    username: '',\n  }\n\n  onChangeUsername = event => {\n    this.setState({\n      username: event.target.value,\n    })\n  }\n\n  onStartGame = event => {\n    event.preventDefault();\n    this.props.setUsername(this.state.username);\n    this.props.startGame();\n  }\n\n  render () {\n    return (\n      <div className={styles.root}>\n        <h1 className={styles.header}>Snake</h1>\n        <form className={styles.form} onSubmit={this.onStartGame}>\n          <input type='text' value={this.state.username} onChange={this.onChangeUsername} className={styles.input} placeholder='Username' />\n          <Button fluid size='large'>Start</Button>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default GameStart\n","import GameStart from './GameStartContainer'\n\nexport default GameStart\n","import { connect } from 'react-redux'\nimport { startGame } from 'redux-app/modules/game/gameActions'\nimport { setUsername } from 'redux-app/modules/user/userActions'\nimport GameStart from './GameStart'\n\nexport default connect(\n  null,\n  {\n    startGame,\n    setUsername,\n  }\n)(GameStart)\n","export const getUsername = state => state.user.username\n","export const DIRECTIONS = {\n  up: 'up',\n  down: 'down',\n  left: 'left',\n  right: 'right',\n}\n\nexport const CELLS_COUNT = {\n  x: 15,\n  y: 30,\n}\n\nexport const SCENE_TIME = 150\n\nconst STARTED_SNAKE_LENGTH = 3\n\nconst getRandomArbitrary = (min, max) => {\n  return Math.random() * (max - min) + min;\n}\n\nexport const getDefaultSnake = () => {\n  const snake = []\n  for (let i = 0; i < STARTED_SNAKE_LENGTH; i++) {\n    snake.push({\n      x: Math.round(CELLS_COUNT.x / 2),\n      y: Math.round(CELLS_COUNT.y / 2) + i,\n    })\n  }\n  return snake\n}\n\nconst isCrashed = snake => {\n  for (let i = 0; i < snake.length; i++) {\n    for (let j = i + 1; j < snake.length; j++) {\n      if (\n        (snake[i].x === snake[j].x && snake[i].y === snake[j].y)\n        || snake[i].x <= 0\n        || snake[i].x > CELLS_COUNT.x\n        || snake[i].y <= 0\n        || snake[i].y > CELLS_COUNT.y\n      ) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\nexport const getUpdatedSnakeHead = (snake, direction) => {\n  const { x, y } = snake[0]\n  let newX = x\n  let newY = y\n  if (direction === DIRECTIONS.right) {\n    newX = x + 1\n  }\n  if (direction === DIRECTIONS.left) {\n    newX = x - 1\n  }\n  if (direction === DIRECTIONS.up) {\n    newY = y - 1\n  }\n  if (direction === DIRECTIONS.down) {\n    newY = y + 1\n  }\n  return {\n    x: newX,\n    y: newY,\n  }\n}\n\nexport const getFruit = snake => {\n  while (true) {\n    const newX = Math.round(getRandomArbitrary(1, CELLS_COUNT.x));\n    const newY = Math.round(getRandomArbitrary(1, CELLS_COUNT.y));\n\n    const snakeItem = snake.some(({ x, y }) => x === newX && y === newY);\n    if (!snakeItem) {\n      return {\n        x: newX,\n        y: newY,\n      }\n    }\n  }\n}\n\nexport const calcStep = ({ snake, fruit, direction }) => {\n  let updatedSnake = [\n    getUpdatedSnakeHead(snake, direction),\n    ...snake.slice(0, snake.length - 1),\n  ]\n  let updatedFruit = fruit\n  let scoresDiff = 0\n  const isEnded = updatedSnake.length >= CELLS_COUNT.x * CELLS_COUNT.y\n\n  if (!isEnded && updatedSnake[0].x === fruit.x && updatedSnake[0].y === fruit.y) {\n    updatedSnake = [\n      ...updatedSnake,\n      snake[snake.length - 1],\n    ]\n    updatedFruit = getFruit(updatedSnake)\n    scoresDiff = 1\n  }\n\n  return {\n    isCrashed: isEnded ? isEnded : isCrashed(updatedSnake),\n    snake: updatedSnake,\n    fruit: updatedFruit,\n    scoresDiff,\n  }\n}\n\nexport const getInitialInfo = () => {\n  const snake = getDefaultSnake()\n  return {\n    snake,\n    fruit: getFruit(snake),\n    scores: 0,\n    direction: DIRECTIONS.up,\n    isStarted: false,\n    isPlaying: false,\n    isEnded: false,\n  }\n}\n\nexport const getUpdatedDirection = (prevDir, nextDir) => {\n  if (\n    (prevDir === DIRECTIONS.left && nextDir === DIRECTIONS.right)\n    || (prevDir === DIRECTIONS.right && nextDir === DIRECTIONS.left)\n  ) {\n    return prevDir\n  }\n  if (\n    (prevDir === DIRECTIONS.up && nextDir === DIRECTIONS.down)\n    || (prevDir === DIRECTIONS.down && nextDir === DIRECTIONS.up)\n  ) {\n    return prevDir\n  }\n  return nextDir\n}\n\nexport const SPRITE_PARTS = {\n  snakeVertical: 'snakeVertical',\n  snakeHorizontal: 'snakeHorizontal',\n  snakeCornerFromRightToDown: 'snakeCornerFromRightToDown',\n  snakeCornerFromRightToUp: 'snakeCornerFromRightToUp',\n  snakeCornerFromLeftToUp: 'snakeCornerFromLeftToUp',\n  snakeCornerFromLeftToDown: 'snakeCornerFromLeftToDown',\n  snakeHeadLeft: 'snakeHeadLeft',\n  snakeHeadRight: 'snakeHeadRight',\n  snakeHeadUp: 'snakeHeadUp',\n  snakeHeadDown: 'snakeHeadDown',\n  snakeTailLeft: 'snakeTailLeft',\n  snakeTailRight: 'snakeTailRight',\n  snakeTailUp: 'snakeTailUp',\n  snakeTailDown: 'snakeTailDown',\n  fruit: 'fruit',\n}\n\nexport const getSnakeSpriteParts = ({ snake, direction = DIRECTIONS.up }) => {\n    return snake.map(({ x, y }, index) => {\n      if (index === 0) {\n        if (direction === DIRECTIONS.left) {\n          return SPRITE_PARTS.snakeHeadLeft\n        }\n        if (direction === DIRECTIONS.right) {\n          return SPRITE_PARTS.snakeHeadRight\n        }\n        if (direction === DIRECTIONS.up) {\n          return SPRITE_PARTS.snakeHeadUp\n        }\n        if (direction === DIRECTIONS.down) {\n          return SPRITE_PARTS.snakeHeadDown\n        }\n      }\n      if (index === snake.length - 1) {\n        if (x === 1 || x === CELLS_COUNT.x) {\n          if (x === CELLS_COUNT.x && snake[index - 1].x === 1) {\n            return SPRITE_PARTS.snakeTailRight\n          }\n          if (x === 1 && snake[index - 1].x === CELLS_COUNT.x) {\n            return SPRITE_PARTS.snakeTailLeft\n          }\n        }\n        if (y === 1 || y === CELLS_COUNT.y) {\n          if (y === CELLS_COUNT.y && snake[index - 1].y === 1) {\n            return SPRITE_PARTS.snakeTailDown\n          }\n          if (y === 1 && snake[index - 1].y === CELLS_COUNT.y) {\n            return SPRITE_PARTS.snakeTailUp\n          }\n        }\n        if (snake[index - 1].x > x) {\n          return SPRITE_PARTS.snakeTailRight\n        }\n        if (snake[index - 1].x < x) {\n          return SPRITE_PARTS.snakeTailLeft\n        }\n        if (snake[index - 1].y < y) {\n          return SPRITE_PARTS.snakeTailUp\n        }\n        return SPRITE_PARTS.snakeTailDown\n      }\n      if (snake[index - 1].x === x) {\n        if (snake[index + 1].x > x) {\n          if (snake[index - 1].y < y) {\n            return SPRITE_PARTS.snakeCornerFromRightToUp\n          }\n          if (snake[index - 1].y > y) {\n            return SPRITE_PARTS.snakeCornerFromRightToDown\n          }\n        }\n        if (snake[index + 1].x < x) {\n          if (snake[index - 1].y < y) {\n            return SPRITE_PARTS.snakeCornerFromLeftToUp\n          }\n          if (snake[index - 1].y > y) {\n            return SPRITE_PARTS.snakeCornerFromLeftToDown\n          }\n        }\n        return SPRITE_PARTS.snakeVertical\n      }\n      if (snake[index - 1].y === y) {\n        if (snake[index + 1].y > y) {\n          if (snake[index - 1].x < x) {\n            return SPRITE_PARTS.snakeCornerFromLeftToDown\n          }\n          if (snake[index - 1].x > x) {\n            return SPRITE_PARTS.snakeCornerFromRightToDown\n          }\n        }\n        if (snake[index + 1].y < y) {\n          if (snake[index - 1].x < x) {\n            return SPRITE_PARTS.snakeCornerFromLeftToUp\n          }\n          if (snake[index - 1].x > x) {\n            return SPRITE_PARTS.snakeCornerFromRightToUp\n          }\n        }\n        return SPRITE_PARTS.snakeHorizontal\n      }\n      return ''\n    })\n  }\n","export default __webpack_public_path__ + \"static/media/arrow-down.64f8221e.svg\";","export default __webpack_public_path__ + \"static/media/arrow-up.8edaba49.svg\";","export default __webpack_public_path__ + \"static/media/arrow-right.d593d182.svg\";","export default __webpack_public_path__ + \"static/media/arrow-left.c37d02d5.svg\";","export default __webpack_public_path__ + \"static/media/pause.1a3d31f9.svg\";","import React, { Component } from 'react'\nimport classNames from 'classnames/bind'\nimport Button from 'shared/apps/Button'\nimport {\n  DIRECTIONS,\n  getInitialInfo,\n  getUpdatedDirection,\n  CELLS_COUNT,\n  calcStep,\n  getSnakeSpriteParts,\n  SPRITE_PARTS,\n  SCENE_TIME,\n} from './game'\nimport arrowDown from './images/arrow-down.svg'\nimport arrowUp from './images/arrow-up.svg'\nimport arrowRight from './images/arrow-right.svg'\nimport arrowLeft from './images/arrow-left.svg'\nimport pause from './images/pause.svg'\nimport * as styles from './GameProgress.module.css'\n\nconst cx = classNames.bind(styles)\n\nconst SPRITE = {\n  width: 320,\n  height: 256,\n  xCount: 5,\n  yCount: 4,\n}\n\nclass GameProgress extends Component {\n  static getSpritePositionByPart (part, cellSize) {\n    if (part === SPRITE_PARTS.snakeVertical) {\n      return `-${cellSize.width * 2}px -${cellSize.height}px`\n    }\n    if (part === SPRITE_PARTS.snakeHorizontal) {\n      return `-${cellSize.width}px 0px`\n    }\n    if (part === SPRITE_PARTS.snakeHeadUp) {\n      return `-${cellSize.width * 3}px 0px`\n    }\n    if (part === SPRITE_PARTS.snakeHeadDown) {\n      return `-${cellSize.width * 4}px -${cellSize.height}px`\n    }\n    if (part === SPRITE_PARTS.snakeHeadRight) {\n      return `-${cellSize.width * 4}px 0px`\n    }\n    if (part === SPRITE_PARTS.snakeHeadLeft) {\n      return `-${cellSize.width * 3}px -${cellSize.height}px`\n    }\n    if (part === SPRITE_PARTS.snakeCornerFromLeftToDown) {\n      return `-${cellSize.width * 2}px 0px`\n    }\n    if (part === SPRITE_PARTS.snakeCornerFromLeftToUp) {\n      return `-${cellSize.width * 2}px -${cellSize.height * 2}px`\n    }\n    if (part === SPRITE_PARTS.snakeCornerFromRightToUp) {\n      return `0px -${cellSize.height}px`\n    }\n    if (part === SPRITE_PARTS.snakeCornerFromRightToDown) {\n      return '0px 0px'\n    }\n    if (part === SPRITE_PARTS.snakeTailDown) {\n      return `-${cellSize.width * 4}px -${cellSize.height * 3}px`\n    }\n    if (part === SPRITE_PARTS.snakeTailUp) {\n      return `-${cellSize.width * 3}px -${cellSize.height * 2}px`\n    }\n    if (part === SPRITE_PARTS.snakeTailLeft) {\n      return `-${cellSize.width * 3}px -${cellSize.height * 3}px`\n    }\n    if (part === SPRITE_PARTS.snakeTailRight) {\n      return `-${cellSize.width * 4}px -${cellSize.height * 2}px`\n    }\n    if (part === SPRITE_PARTS.fruit) {\n      return `0px -${cellSize.height * 3}px`\n    }\n\n  }\n\n  areaContainerRef = null\n  state = {\n    sceneSize: {\n      width: 0,\n      height: 0,\n    },\n    ...getInitialInfo(),\n    ...this.props.gameInitialInfo,\n    isPlaying: false,\n    tempDirection: null,\n    isShownMobileRotationMessage: false,\n  }\n\n  calcStepTimer = null\n\n  componentDidMount() {\n    this.onSetSceneSize()\n    window.addEventListener('resize', this.onSetSceneSize)\n    window.addEventListener('orientationchange', this.onSetSceneSize)\n    document.addEventListener('keydown', this.onKeyDown)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.onSetSceneSize)\n    window.removeEventListener('orientationchange', this.onSetSceneSize)\n    document.removeEventListener('keydown', this.onKeyDown)\n  }\n\n  onSetSceneSize = () => {\n    const { width, height } = this.areaContainerRef.getBoundingClientRect()\n    console.log('onSetSceneSize', width, height)\n    if (height > width) {\n      this.setState({\n        sceneSize: {\n          width,\n          height,\n        },\n        isShownMobileRotationMessage: false,\n      })\n    } else {\n      this.setState({\n        isShownMobileRotationMessage: true,\n      })\n      this.onPauseGame()\n    }\n  }\n\n  onStartGame = () => {\n    if (!this.state.isPlaying) {\n      this.setState({\n        isPlaying: true,\n        isStarted: true,\n      })\n      this.calcStepTimer = setInterval(() => {\n        const { fruit, snake, direction, scores, tempDirection } = this.state\n        const newDirection = tempDirection ? tempDirection : direction\n        const nextStep = calcStep({ snake, fruit, direction: newDirection })\n        if (nextStep.isCrashed) {\n          this.onFinishGame()\n          return\n        }\n        this.setState({\n          fruit: nextStep.fruit,\n          snake: nextStep.snake,\n          scores: scores + nextStep.scoresDiff,\n          direction: newDirection,\n          tempDirection: null,\n        }, () => {\n          this.props.setGameInfo(this.state)\n        })\n      }, SCENE_TIME)\n    }\n  }\n\n  onRestartGame = () => {\n    this.setState({\n      ...getInitialInfo(),\n    }, () => {\n      this.props.setGameInfo(this.state)\n    })\n  }\n\n  onPauseGame = () => {\n    clearInterval(this.calcStepTimer)\n    this.calcStepTimer = null\n    this.setState({\n      isPlaying: false,\n    }, () => {\n      this.props.setGameInfo(this.state)\n    })\n  }\n\n  onFinishGame = () => {\n    this.onPauseGame()\n    this.setState({\n      isEnded: true,\n    }, () => {\n      this.props.setGameInfo(this.state)\n      this.props.saveGameResult({ username: this.props.username })\n    })\n  }\n\n  onKeyDown = event => {\n    let direction = this.state.direction\n    switch(event.keyCode) {\n      case 37:\n        direction = DIRECTIONS.left\n        break\n      case 38:\n        direction = DIRECTIONS.up\n        break\n      case 39:\n        direction = DIRECTIONS.right\n        break\n      case 40:\n        direction = DIRECTIONS.down\n        break\n      default:\n        direction = this.state.direction\n    }\n    this.onChangeDirection(direction)\n  }\n\n  onChangeDirection = (direction) => {\n    if (this.state.isPlaying) {\n      this.setState({\n        tempDirection: getUpdatedDirection(this.state.direction, direction),\n      })\n    }\n  }\n\n  onSwipe = (event) => {\n    let direction = this.state.direction\n    switch(event.direction) {\n      case 2:\n        direction = DIRECTIONS.left\n        break\n      case 8:\n        direction = DIRECTIONS.up\n        break\n      case 4:\n        direction = DIRECTIONS.right\n        break\n      case 16:\n        direction = DIRECTIONS.down\n        break\n      default:\n        direction = this.state.direction\n    }\n    this.onChangeDirection(direction)\n  }\n\n  onGoToResults = () => {\n    this.props.finishGame()\n    this.onRestartGame()\n  }\n\n  render() {\n    const {\n      sceneSize,\n      snake,\n      fruit,\n      scores,\n      direction,\n      tempDirection,\n      isPlaying,\n      isEnded,\n      isStarted,\n      isShownMobileRotationMessage,\n    } = this.state\n    const cellSize = {\n      width: Math.round(sceneSize.width / CELLS_COUNT.x),\n      height: Math.round(sceneSize.height / CELLS_COUNT.y),\n    }\n    const spritePositions = getSnakeSpriteParts({ snake, direction })\n\n    return (\n      <div className={styles.root}>\n        <div className={styles.gameAreaContainer} ref={ref => { this.areaContainerRef = ref }}>\n          <div className={styles.gameArea} style={{ width: sceneSize.width, height: sceneSize.height }}>\n            {snake.map(({ x, y }, index) => (\n              <span\n                key={index}\n                className={cx('gameObject', styles.snake, { head: index === 0 })}\n                style={{\n                  transform: `translate(${cellSize.width * (x - 1)}px, ${cellSize.height * (y - 1)}px)`,\n                  width: cellSize.width,\n                  height: cellSize.height,\n                  backgroundSize: `${cellSize.width * SPRITE.xCount}px ${cellSize.height * SPRITE.yCount}px`,\n                  backgroundPosition: GameProgress.getSpritePositionByPart(spritePositions[index], cellSize)\n                }}\n              />\n            ))}\n            <span\n              className={cx('gameObject', 'fruit')}\n              style={{\n                transform: `translate(${cellSize.width * (fruit.x - 1)}px, ${cellSize.height * (fruit.y - 1)}px)`,\n                width: cellSize.width,\n                height: cellSize.height,\n                backgroundSize: `${cellSize.width * SPRITE.xCount}px ${cellSize.height * SPRITE.yCount}px`,\n                backgroundPosition: GameProgress.getSpritePositionByPart(SPRITE_PARTS.fruit, cellSize)\n              }}\n            />\n            <div className={styles.scores}>\n              Scores: {scores}\n            </div>\n            <button className={styles.pauseButton} onClick={this.onPauseGame}>\n              <img src={pause} alt='' width={24} height={24} />\n            </button>\n            <div className={styles.gameControls}>\n              <button\n                className={cx('gameControl', 'up', { pressed: tempDirection === DIRECTIONS.up })}\n                onClick={() => this.onChangeDirection(DIRECTIONS.up)}\n              >\n                <img src={arrowUp} alt=''/>\n              </button>\n              <button\n                className={cx('gameControl', 'right', { pressed: tempDirection === DIRECTIONS.right })}\n                onClick={() => this.onChangeDirection(DIRECTIONS.right)}\n              >\n                <img src={arrowRight} alt='' />\n              </button>\n              <button\n                className={cx('gameControl', 'down', { pressed: tempDirection === DIRECTIONS.down })}\n                onClick={() => this.onChangeDirection(DIRECTIONS.down)}\n              >\n                <img src={arrowDown} alt='' />\n              </button>\n              <button\n                className={cx('gameControl', 'left', { pressed: tempDirection === DIRECTIONS.left })}\n                onClick={() => this.onChangeDirection(DIRECTIONS.left)}\n              >\n                <img src={arrowLeft} alt='' />\n              </button>\n            </div>\n          </div>\n        </div>\n        {isShownMobileRotationMessage && (\n          <div className={styles.gamePopup}>\n            <div className={styles.gamePopupContent}>\n              <h2>Please rotate phone vertically</h2>\n            </div>\n          </div>\n        )}\n        {(!isPlaying && !isShownMobileRotationMessage) && (\n          <div className={styles.gamePopup}>\n            <div className={styles.gamePopupContent}>\n              {isEnded && (\n                <React.Fragment>\n                  <h2>Game over</h2>\n                  <div>Your scores: {scores}</div>\n                  <Button onClick={this.onRestartGame}>Restart</Button>\n                  <br />\n                  <Button onClick={this.onGoToResults}>View top results</Button>\n                </React.Fragment>\n              )}\n              {(isStarted && !isEnded) && (\n                <React.Fragment>\n                  <h2>Paused</h2>\n                  <Button onClick={this.onStartGame}>Return to game</Button>\n                </React.Fragment>\n              )}\n              {!isStarted && (\n                <React.Fragment>\n                  <h2>Prepare to game</h2>\n                  <Button onClick={this.onStartGame}>I'm ready!</Button>\n                </React.Fragment>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default GameProgress\n","import GameProgress from './GameProgressContainer'\n\nexport default GameProgress\n","import { connect } from 'react-redux'\nimport { finishGame, setGameInfo, saveGameResult } from 'redux-app/modules/game/gameActions'\nimport { getGameInfo } from 'redux-app/modules/game/gameSelectors'\nimport { getUsername } from 'redux-app/modules/user/userSelectors'\nimport GameProgress from './GameProgress'\n\nexport default connect(\n  state => ({\n    gameInitialInfo: getGameInfo(state),\n    username: getUsername(state),\n  }),\n  {\n    finishGame,\n    setGameInfo,\n    saveGameResult,\n  }\n)(GameProgress)\n","import Button from 'shared/apps/Button'\nimport * as styles from './Results.module.css'\n\nconst Results = ({ results, startNew }) => (\n  <div className={styles.root}>\n    <h1>\n      Results\n    </h1>\n    <Button onClick={startNew}>Start new game</Button>\n    <ul className={styles.list}>\n      {/*<li>*/}\n      {/*  <span>*/}\n      {/*    <span className={styles.place}>#</span>*/}\n      {/*    <span className={styles.username}>Username</span>*/}\n      {/*  </span>*/}\n      {/*  <span className={styles.scores}>Scores</span>*/}\n      {/*</li>*/}\n      {results.map(({ username, scores }, index) => (\n        <li key={index}>\n          <span>\n            <span className={styles.place}>#{index + 1}</span>\n            <span className={styles.username}>{username ? username : '[NO_NAME]'}</span>\n          </span>\n          <span className={styles.scores}>{scores}</span>\n        </li>\n      ))}\n    </ul>\n  </div>\n)\n\nexport default Results\n","import Results from './ResultsContainer'\n\nexport default Results\n","import { connect } from 'react-redux'\nimport { startNew } from 'redux-app/modules/game/gameActions'\nimport { getGameTopResults } from 'redux-app/modules/game/gameSelectors'\nimport Results from './Results'\n\nexport default connect(\n  state => ({\n    results: getGameTopResults(state),\n  }),\n  {\n    startNew,\n  }\n)(Results)\n","import classNames from 'classnames/bind'\nimport { GAME_STATUSES } from 'constants/game'\nimport GameStart from './apps/GameStart'\nimport GameProgress from './apps/GameProgress'\nimport Results from './apps/Results'\nimport * as styles from './Game.module.css'\n\nconst cx = classNames.bind(styles)\n\nconst Game = ({ gameStatus }) => (\n  <div className={styles.root}>\n    <div className={styles.content}>\n      <div className={cx('gameStep', { active: gameStatus === GAME_STATUSES.notStarted })}>\n        <GameStart />\n      </div>\n      <div className={cx('gameStep', { active: gameStatus === GAME_STATUSES.inProgress })}>\n        <GameProgress />\n      </div>\n      <div className={cx('gameStep', { active: gameStatus === GAME_STATUSES.finished })}>\n        <Results />\n      </div>\n    </div>\n  </div>\n)\n\nexport default Game\n","import GameContainer from './GameContainer'\n\nexport default GameContainer\n","import { connect } from 'react-redux'\nimport { getGameStatus } from 'redux-app/modules/game/gameSelectors'\nimport Game from './Game'\n\nexport default connect(\n  state => ({\n    gameStatus: getGameStatus(state),\n  }),\n  null\n)(Game)\n","import { Provider } from 'react-redux'\nimport { store } from './redux-app'\nimport Game from './apps/Game'\nimport './App.css';\n\nconst App = () => (\n  <Provider store={store}>\n    <Game />\n  </Provider>\n)\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Results_root__3GeLc\",\"list\":\"Results_list__1-Wbn\",\"place\":\"Results_place__1RgJZ\",\"username\":\"Results_username__cMduw\",\"scores\":\"Results_scores__1xqu6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"GameStart_root__32D5t\",\"header\":\"GameStart_header__19PxQ\",\"form\":\"GameStart_form__srtCD\",\"input\":\"GameStart_input__3drHp\"};"],"sourceRoot":""}